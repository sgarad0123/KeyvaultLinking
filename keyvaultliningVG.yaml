trigger: none

variables:
  - group: vg-create-vg-source
  - group: devops-secrets-vg 

pool:
  name: AKS
  vmImage: 'ubuntu-latest'

stages:
# Stage 1: Check/Create Variable Group
- stage: EnsureVariableGroup
  jobs:
  - job: CheckVG
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "üîç Checking if variable group '$VG_NAME' exists..."
          GROUP_JSON=$(az devops variable-group list --project "$(System.TeamProject)" --query "[?name=='$VG_NAME']" -o json)
          GROUP_ID=$(echo "$GROUP_JSON" | jq -r '.[0].id')

          if [[ "$GROUP_ID" == "null" ]]; then
            echo "üöÄ Variable group '$VG_NAME' does not exist. Creating..."
            az devops variable-group create --project "$(System.TeamProject)" --name "$VG_NAME" --variables dummyKey=dummyValue
            echo "‚úÖ Created variable group '$VG_NAME'"
          else
            echo "‚úÖ Variable group '$VG_NAME' already exists."
          fi
      env:
        AZURE_DEVOPS_EXT_PATVAR: $(AZURE_DEVOPS_PAT)
      displayName: 'üîç Ensure Variable Group Exists'

# Stage 2: Validate Secrets
- stage: ValidateAndLinkSecrets
  dependsOn: EnsureVariableGroup
  jobs:
  - job: ValidateSecrets
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "üîê Validating and retrieving secrets from Key Vault '$KEY_VAULT_NAME'..."
          IFS=',' read -ra KEYS <<< "$SECRET_KEYS"
          echo "" > found_secrets.txt

          for SECRET_NAME in "${KEYS[@]}"; do
            echo "üîé Checking secret: $SECRET_NAME"
            if az keyvault secret show --vault-name "$KEY_VAULT_NAME" --name "$SECRET_NAME" &> secret.json; then
              VALUE=$(jq -r '.value' secret.json)
              echo "‚úÖ Secret '$SECRET_NAME' found."
              echo "$SECRET_NAME=$VALUE" >> found_secrets.txt
              echo "##vso[task.setvariable variable=$SECRET_NAME;issecret=true]$VALUE"
            else
              echo "‚ö†Ô∏è Secret '$SECRET_NAME' not found in Key Vault. Skipping..."
            fi
          done
      displayName: 'üîê Validate Key Vault Secrets'

# Stage 3: Add Secrets to Variable Group
- stage: AddToVariableGroup
  dependsOn: ValidateAndLinkSecrets
  jobs:
  - job: AddSecrets
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "üì¶ Preparing to add secrets to variable group '$VG_NAME'..."
          JSON_PAYLOAD="{"

          while IFS= read -r line; do
            SECRET_KEY=$(echo $line | cut -d= -f1)
            SECRET_VAL=$(echo $line | cut -d= -f2-)
            JSON_PAYLOAD+="\"$SECRET_KEY\":{\"value\":\"$SECRET_VAL\"},"
          done < found_secrets.txt

          JSON_PAYLOAD="${JSON_PAYLOAD%,}}"

          echo "üîó Final payload: $JSON_PAYLOAD"

          az devops variable-group update \
            --project "$(System.TeamProject)" \
            --group-name "$VG_NAME" \
            --variables "$JSON_PAYLOAD"
      env:
        AZURE_DEVOPS_EXT_PATVAR: $(AZURE_DEVOPS_PAT)
      displayName: 'üîó Add Available Secrets to Variable Group'
